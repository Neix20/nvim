{
	// Place your snippets for csharp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Http Get Controller": {
		"prefix": "httpGet",
		"body": [
			"[HttpGet()]",
			"[Route(\"${1:funcName}\")]",
			"public HttpResponseMessage ${1:funcName}([FromBody] JToken postData)",
			"{",
			"\tstring Result = \"\";",
			"\tstring ResponseCode = clsConst.const_ResponseCode_SystemError;",
			"\tJObject jobj = new JObject();",
			"\ttry",
			"\t{",
			"\t\tstring Messaging = postData.ToString();",
			"",
			"\t\t// Log FileName",
			"\t\tclsLogger.InfoLog(\"${2:projName} ${1:funcName}\");",
			"\t\tclsLogger.InfoLog(Messaging);",
			"",
			"\t\t// Parameters",
			"\t\tJObject paramObj = clsFuncs.GenJObj(Messaging);",
			"",
			"\t\t${3:// params}",
			"",
			"\t\tbool flag = false;",
			"",
			"\t\t// Condition",
			"\t\t${4:// condition}",
			"",
			"\t\tif (flag)",
			"\t\t{",
			"\t\t\tResponseCode = clsConst.const_ResponseCode_Successful;",
			"\t\t}",
			"\t\telse",
			"\t\t{",
			"\t\t\tResponseCode = clsConst.const_Response_Code_API_MissingInformation;",
			"\t\t}",
			"\t}",
			"\tcatch (Exception ex)",
			"\t{",
			"\t\tclsLogger.ErrorLog(fstrPageName + \"${1:funcName}\", ex);",
			"\t}",
			"",
			"\tjobj[clsConst.const_Key_Field_ResponseCode] = ResponseCode;",
			"\tResult = clsFuncs.SerializeJObj(jobj);",
			"\treturn ReturnResult(Result);",
			"}"
		],
		"description": "HTTP Get Controller"
	},
	"DataTable": {
		"prefix": "DataTable",
		"body": [
			"public static DataTable ${1:function_name}() {",
			"\tDataTable result = null;",
			"",
			"\ttry",
			"\t{",
			"\t\tresult = new DataTable();",
			"",
			"\t\tusing (SqlConnection Conn = new SqlConnection(clsConst.SysDBConnString()))",
			"\t\t{",
			"\t\t\tConn.Open();",
			"\t\t\tusing (SqlCommand command = new SqlCommand(\"${2:sql_procedure_name}\", Conn))",
			"\t\t\t{",
			"\t\t\t\tSqlParameter Param = null;",
			"\t\t\t\tcommand.CommandType = CommandType.StoredProcedure;",
			"",
			"\t\t\t\tSqlDataReader SQLReader = command.ExecuteReader();",
			"\t\t\t\tresult.Load(SQLReader);",
			"\t\t\t\tSQLReader.Close();",
			"\t\t\t}",
			"\t\t}",
			"\t}",
			"\tcatch (SqlException ex)",
			"\t{",
			"\t\tclsLogger.ErrorLog(fstrPageName, ex);",
			"\t}",
			"\treturn result;",
			"}"
		],
		"description": "DataTable"
	},
	"DataTable Param": {
		"prefix": "param",
		"body": [
			"Param = new SqlParameter();",
			"Param.ParameterName = \"${1:param_name}\";",
			"Param.SqlDbType = SqlDbType.${2:param_type};",
			"Param.Direction = ParameterDirection.Input;",
			"Param.Value = ${1:param_name};",
			"command.Parameters.Add(Param);"
		],
		"description": "DataTable Param"
	},
	"Request Attributes": {
		"prefix": "param",
		"body": [
			"string $1 = clsFuncs.GetJsonNode(paramObj, \"$1\");"
		],
		"description": "Request Attributes"
	},
	"DataTable Boolean": {
		"prefix": "DataTblBool",
		"body": [
			"public static bool ${1:function_name}()",
			"{",
			"    try",
			"    {",
			"        using (SqlConnection Conn = new SqlConnection(clsConst.SysDBConnString()))",
			"        {",
			"            Conn.Open();",
			"            using (SqlCommand command = new SqlCommand(\"${2:sql_procedure_name}\", Conn))",
			"            {",
			"                SqlParameter Param = null;",
			"                command.CommandType = CommandType.StoredProcedure;",
			"                ",
			"                command.ExecuteNonQuery();",
			"                command.Dispose();",
			"            }",
			"            return true;",
			"        }",
			"    }",
			"    catch (SqlException ex)",
			"    {",
			"        clsLogger.ErrorLog(fstrPageName, ex);",
			"    }",
			"    return false;",
			"}"
		],
		"description": "DataTable Boolean"
	},
	// String
	"GridView String": {
		"prefix": "string_gridView",
		"body": [
			"// ${1:column_caption}",
			"settings.Columns.Add(col => {",
			"\tcol.FieldName = \"${2:column_name}\";",
			"\tcol.Caption = \"${1:column_caption}\";",
			"});"
		],
		"description": "GridView String"
	},
	// Int - Spin Edit
	"GridView Integer": {
		"prefix": "int_gridView",
		"body": [
			"// ${1:column_caption}",
			"settings.Columns.Add(col =>",
			"{",
			"\tcol.FieldName = \"${2:column_name}\";",
			"\tcol.Caption = \"${1:column_caption}\";",
			"",
			"\tcol.ColumnType = MVCxGridViewColumnType.SpinEdit;",
			"\tSpinEditProperties prop = col.PropertiesEdit as SpinEditProperties;",
			"\tprop.NumberType = SpinEditNumberType.Integer;",
			"\tprop.MinValue = 0;",
			"\tprop.MaxValue = 10000000;",
			"\tprop.DisplayFormatString = \"N0\";",
			"});"
		],
		"description": "GridView Integer"
	},
	// Decimal - Spin Edit
	"GridView Decimal": {
		"prefix": "decimal_gridView",
		"body": [
			"// ${1:column_caption}",
			"settings.Columns.Add(col =>",
			"{",
			"\tcol.FieldName = \"${2:column_name}\";",
			"\tcol.Caption = \"${1:column_caption}\";",
			"",
			"\tcol.ColumnType = MVCxGridViewColumnType.SpinEdit;",
			"\tSpinEditProperties prop = col.PropertiesEdit as SpinEditProperties;",
			"\tprop.NumberType = SpinEditNumberType.Float;",
			"\tprop.MinValue = 0;",
			"\tprop.MaxValue = 10000000;",
			"\tprop.Increment = 0.1M;",
			"\tprop.DisplayFormatString = \"N2\";",
			"});"
		],
		"description": "GridView Decimal"
	},
	// ComboBox
	"GridView ComboBox": {
		"prefix": "comboBox_gridView",
		"body": [
			"// ${1:column_caption}",
			"settings.Columns.Add(col =>",
			"{",
			"\tcol.FieldName = \"${2:column_name}\";",
			"\tcol.Caption = \"${1:column_caption}\";",
			"",
			"\tcol.ColumnType = MVCxGridViewColumnType.ComboBox;",
			"\tComboBoxProperties prop = col.PropertiesEdit as ComboBoxProperties;",
			"\tprop.DataSource = ${3:DataSource}",
			"\tprop.TextField = \"\";",
			"\tprop.ValueField = \"\";",
			"\tprop.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;",
			"\tprop.ValidationSettings.RequiredField.IsRequired = true;",
			"",
			"\tcol.EditFormSettings.Visible = DefaultBoolean.False;",
			"});"
		],
		"description": "GridView ComboBox"
	},
	//Html
	"GridView Html": {
		"prefix": "html_gridView",
		"body": [
			"// ${1:column_caption}",
			"settings.Columns.Add(col =>",
			"{",
			"\tcol.FieldName = \"${2:column_name}\";",
			"\tcol.Caption = \"${1:column_caption}\";",
			"\tcol.UnboundType = DevExpress.Data.UnboundColumnType.String;",
			"\tcol.PropertiesEdit.EncodeHtml = false;",
			"\tcol.ReadOnly = true;",
			"",
			"\tcol.EditFormSettings.Visible = DefaultBoolean.False;",
			"});",
			"",
			"settings.CustomUnboundColumnData = (s, e) => {",
			"\tif (e.Column.FieldName.Equals(\"${2:column_name}\"))",
			"\t{",
			"\t\tstring file_path = e.GetListSourceFieldValue(\"${2:column_name}\").ToString();",
			"\t\te.Value = $\"<img src='{file_path}' style='height: 50px; width: 50px' alt='[ Missing Image ]' />\";",
			"\t}",
			"};"
		],
		"description": "GridView Html"
	},
	// DateTime
	"GridView DateTime": {
		"prefix": "dateTime_GridView",
		"body": [
			"// ${1:column_caption}",
			"settings.Columns.Add(col =>",
			"{",
			"\tcol.FieldName = \"${2:column_name}\";",
			"\tcol.Caption = \"${1:column_caption}\";",
			"",
			"\tcol.ColumnType = MVCxGridViewColumnType.DateEdit;",
			"\tcol.PropertiesEdit.DisplayFormatString = \"yyyy-MM-dd\";",
			"",
			"\tDateEditProperties prop = col.PropertiesEdit as DateEditProperties;",
			"\tprop.DisplayFormatString = \"yyyy-MM-dd\";",
			"\tprop.DisplayFormatInEditMode = true;",
			"});"
		],
		"description": "GridView DateTime"
	},
	// List
	"DataTable List": {
		"prefix": "list",
		"body": [
			"public static List<${1:class_name}> SelectAllList(int id)",
			"{",
			"\tList<${1:class_name}> resList = new List<${1:class_name}>();",
			"\tDataTable dt = ${2:function_name}(id);",
			"",
			"\tforeach (DataRow row in dt.Rows)",
			"\t{",
			"\t\t${1:class_name} item = new ${1:class_name}();",
			"",
			"\t\titem.id = clsCommon.ToInt(row[\"id\"]);",
			"",
			"\t\tresList.Add(item);",
			"\t}",
			"",
			"\treturn resList;",
			"}"
		],
		"description": "DataTable List"
	},
	"DevExpress GridView Center": {
		"prefix": "center",
		"body": [
			"// Header Set Center",
			"settings.Styles.Header.HorizontalAlign = HorizontalAlign.Center;",
			"settings.Styles.Header.VerticalAlign = VerticalAlign.Middle;",
			"",
			"// Cell Styles Center",
			"settings.Styles.Cell.HorizontalAlign = HorizontalAlign.Center;",
			"settings.Styles.Cell.VerticalAlign = VerticalAlign.Middle;"
		],
		"description": "DevExpress GridView Center"
	},
	"Master Grid View DevExpress": {
		"prefix": "slave_master_devExpress",
		"body": [
			"// Setting Detail Grid",
			"settings.SettingsDetail.AllowOnlyOneMasterRowExpanded = false;",
			"settings.SettingsDetail.ShowDetailRow = true;",
			"",
			"settings.SetDetailRowTemplateContent(c =>",
			"{",
			"\tHtml.RenderAction(\"${Action}\", \"${Controller}\", new { product_id = DataBinder.Eval(c.DataItem, \"id\") });",
			"});"
		],
		"description": "Slave-Master Grid View DevExpress"
	},
	"User Init": {
		"prefix": "user",
		"body": [
			"public static bool ContainPermission(string username, string permission)",
			"{",
			"\tint res = -1;",
			"",
			"\tDataTable dt = ContainPermissionDt(username, permission);",
			"",
			"\tforeach (DataRow row in dt.Rows)",
			"\t{",
			"\t\tres = clsCommon.ToInt(row[\"Result\"]);",
			"\t}",
			"",
			"\treturn res >= 1;",
			"}",
			"",
			"public static DataTable ContainPermissionDt(string username, string permission)",
			"{",
			"\tDataTable result = null;",
			"",
			"\ttry",
			"\t{",
			"\t\tresult = new DataTable();",
			"",
			"\t\tusing (SqlConnection Conn = new SqlConnection(clsConst.SysDBConnString()))",
			"\t\t{",
			"\t\t\tConn.Open();",
			"\t\t\tusing (",
			"\t\t\t\tSqlCommand command = new SqlCommand(\"NSP_T${tblName}User_ContainPermission\", Conn)",
			"\t\t\t)",
			"\t\t\t{",
			"\t\t\t\tSqlParameter Param = new SqlParameter();",
			"\t\t\t\tcommand.CommandType = CommandType.StoredProcedure;",
			"",
			"\t\t\t\tParam = new SqlParameter();",
			"\t\t\t\tParam.ParameterName = \"username\";",
			"\t\t\t\tParam.SqlDbType = SqlDbType.VarChar;",
			"\t\t\t\tParam.Direction = ParameterDirection.Input;",
			"\t\t\t\tParam.Value = username;",
			"\t\t\t\tcommand.Parameters.Add(Param);",
			"",
			"\t\t\t\tParam = new SqlParameter();",
			"\t\t\t\tParam.ParameterName = \"permission\";",
			"\t\t\t\tParam.SqlDbType = SqlDbType.VarChar;",
			"\t\t\t\tParam.Direction = ParameterDirection.Input;",
			"\t\t\t\tParam.Value = permission;",
			"\t\t\t\tcommand.Parameters.Add(Param);",
			"",
			"\t\t\t\tSqlDataReader SQLReader = command.ExecuteReader();",
			"\t\t\t\tresult.Load(SQLReader);",
			"\t\t\t\tSQLReader.Close();",
			"\t\t\t}",
			"\t\t}",
			"\t}",
			"\tcatch (SqlException ex)",
			"\t{",
			"\t\tclsLogger.ErrorLog(fstrPageName, ex);",
			"\t}",
			"\treturn result;",
			"}",
			"",
			"public static bool ContainRole(string username, string role)",
			"{",
			"\tint res = -1;",
			"",
			"\tDataTable dt = ContainRoleDt(username, role);",
			"",
			"\tforeach (DataRow row in dt.Rows)",
			"\t{",
			"\t\tres = clsCommon.ToInt(row[\"Result\"]);",
			"\t}",
			"",
			"\treturn res >= 1;",
			"}",
			"",
			"public static DataTable ContainRoleDt(string username, string role)",
			"{",
			"\tDataTable result = null;",
			"",
			"\ttry",
			"\t{",
			"\t\tresult = new DataTable();",
			"",
			"\t\tusing (SqlConnection Conn = new SqlConnection(clsConst.SysDBConnString()))",
			"\t\t{",
			"\t\t\tConn.Open();",
			"\t\t\tusing (SqlCommand command = new SqlCommand(\"NSP_T${tblName}User_ContainRole\", Conn))",
			"\t\t\t{",
			"\t\t\t\tSqlParameter Param = new SqlParameter();",
			"\t\t\t\tcommand.CommandType = CommandType.StoredProcedure;",
			"",
			"\t\t\t\tParam = new SqlParameter();",
			"\t\t\t\tParam.ParameterName = \"username\";",
			"\t\t\t\tParam.SqlDbType = SqlDbType.VarChar;",
			"\t\t\t\tParam.Direction = ParameterDirection.Input;",
			"\t\t\t\tParam.Value = username;",
			"\t\t\t\tcommand.Parameters.Add(Param);",
			"",
			"\t\t\t\tParam = new SqlParameter();",
			"\t\t\t\tParam.ParameterName = \"role\";",
			"\t\t\t\tParam.SqlDbType = SqlDbType.VarChar;",
			"\t\t\t\tParam.Direction = ParameterDirection.Input;",
			"\t\t\t\tParam.Value = role;",
			"\t\t\t\tcommand.Parameters.Add(Param);",
			"",
			"\t\t\t\tSqlDataReader SQLReader = command.ExecuteReader();",
			"\t\t\t\tresult.Load(SQLReader);",
			"\t\t\t\tSQLReader.Close();",
			"\t\t\t}",
			"\t\t}",
			"\t}",
			"\tcatch (SqlException ex)",
			"\t{",
			"\t\tclsLogger.ErrorLog(fstrPageName, ex);",
			"\t}",
			"\treturn result;",
			"}",
			"",
			"public static bool CheckUsername(string username)",
			"{",
			"\tint res = -1;",
			"",
			"\tDataTable dt = CheckUsernameDataTable(username);",
			"",
			"\tforeach (DataRow row in dt.Rows)",
			"\t{",
			"\t\tres = clsCommon.ToInt(row[\"userId\"]);",
			"\t}",
			"",
			"\treturn res > -1;",
			"}",
			"",
			"public static T${tblName}User LoginUser(string username, string password)",
			"{",
			"\tT${tblName}User res = new T${tblName}User();",
			"",
			"\tDataTable dt = LoginUserDataTable(username, password);",
			"",
			"\tforeach (DataRow row in dt.Rows)",
			"\t{",
			"\t\tres.id = clsCommon.ToInt(row[\"id\"]);",
			"",
			"\t\tres.username = clsCommon.ToStr(row[\"username\"]);",
			"\t\tres.password = clsCommon.ToStr(row[\"password\"]);",
			"\t\tres.email_address = clsCommon.ToStr(row[\"email_address\"]);",
			"\t}",
			"",
			"\tif (res.id == -1)",
			"\t{",
			"\t\treturn null;",
			"\t}",
			"",
			"\treturn res;",
			"}",
			"",
			"public static int GetUserId(string username)",
			"{",
			"\tint res = -1;",
			"",
			"\tDataTable dt = CheckUsernameDataTable(username);",
			"",
			"\tforeach (DataRow row in dt.Rows)",
			"\t{",
			"\t\tres = clsCommon.ToInt(row[\"userId\"]);",
			"\t}",
			"",
			"\treturn res;",
			"}",
			"",
			"public static DataTable CheckUsernameDataTable(string username)",
			"{",
			"\tDataTable result = null;",
			"",
			"\ttry",
			"\t{",
			"\t\tresult = new DataTable();",
			"",
			"\t\tusing (SqlConnection Conn = new SqlConnection(clsConst.SysDBConnString()))",
			"\t\t{",
			"\t\t\tConn.Open();",
			"\t\t\tusing (SqlCommand command = new SqlCommand(\"NSP_T${tblName}User_CheckUsername\", Conn))",
			"\t\t\t{",
			"\t\t\t\tSqlParameter Param = new SqlParameter();",
			"\t\t\t\tcommand.CommandType = CommandType.StoredProcedure;",
			"",
			"\t\t\t\tParam = new SqlParameter();",
			"\t\t\t\tParam.ParameterName = \"username\";",
			"\t\t\t\tParam.SqlDbType = SqlDbType.VarChar;",
			"\t\t\t\tParam.Direction = ParameterDirection.Input;",
			"\t\t\t\tParam.Value = username;",
			"\t\t\t\tcommand.Parameters.Add(Param);",
			"",
			"\t\t\t\tSqlDataReader SQLReader = command.ExecuteReader();",
			"\t\t\t\tresult.Load(SQLReader);",
			"\t\t\t\tSQLReader.Close();",
			"\t\t\t}",
			"\t\t}",
			"\t}",
			"\tcatch (SqlException ex)",
			"\t{",
			"\t\tclsLogger.ErrorLog(fstrPageName, ex);",
			"\t}",
			"\treturn result;",
			"}",
			"",
			"public static DataTable LoginUserDataTable(string username, string password)",
			"{",
			"\tDataTable result = null;",
			"",
			"\ttry",
			"\t{",
			"\t\tresult = new DataTable();",
			"",
			"\t\tusing (SqlConnection Conn = new SqlConnection(clsConst.SysDBConnString()))",
			"\t\t{",
			"\t\t\tConn.Open();",
			"\t\t\tusing (SqlCommand command = new SqlCommand(\"NSP_T${tblName}User_LoginUser\", Conn))",
			"\t\t\t{",
			"\t\t\t\tSqlParameter Param = new SqlParameter();",
			"\t\t\t\tcommand.CommandType = CommandType.StoredProcedure;",
			"",
			"\t\t\t\tParam = new SqlParameter();",
			"\t\t\t\tParam.ParameterName = \"username\";",
			"\t\t\t\tParam.SqlDbType = SqlDbType.VarChar;",
			"\t\t\t\tParam.Direction = ParameterDirection.Input;",
			"\t\t\t\tParam.Value = username;",
			"\t\t\t\tcommand.Parameters.Add(Param);",
			"",
			"\t\t\t\tParam = new SqlParameter();",
			"\t\t\t\tParam.ParameterName = \"password\";",
			"\t\t\t\tParam.SqlDbType = SqlDbType.VarChar;",
			"\t\t\t\tParam.Direction = ParameterDirection.Input;",
			"\t\t\t\tParam.Value = password;",
			"\t\t\t\tcommand.Parameters.Add(Param);",
			"",
			"\t\t\t\tSqlDataReader SQLReader = command.ExecuteReader();",
			"\t\t\t\tresult.Load(SQLReader);",
			"\t\t\t\tSQLReader.Close();",
			"\t\t\t}",
			"\t\t}",
			"\t}",
			"\tcatch (SqlException ex)",
			"\t{",
			"\t\tclsLogger.ErrorLog(fstrPageName, ex);",
			"\t}",
			"\treturn result;",
			"}"
		],
		"description": "User Init"
	},
	"WebForm Init": {
		"prefix": "aspx_init",
		"body": [
			"string fstrPageName = \"$1\";\r",
			"string HostPath = ConfigurationSettings.AppSettings[\"HostPath\"];\r",
			"\r",
			"private void CheckCredential()\r",
			"{\r",
			"    string[] credentail = Session[\"Credential\"].ToString().Split(',');\r",
			"    if (credentail.Any(fstrPageName.Contains))\r",
			"    {\r",
			"\r",
			"    }\r",
			"    else\r",
			"    {\r",
			"        Response.Redirect(HostPath + clsConst.SessionExpired);\r",
			"        Response.End();\r",
			"    }\r",
			"}\r",
			"\r",
			"private void LoadDefault()\r",
			"{\r",
			"}\r",
			"\r",
			"protected void Page_Load(object sender, EventArgs e)\r",
			"{\r",
			"    if (!Page.IsPostBack)\r",
			"    {\r",
			"        if (Session[\"Credential\"] != null)\r",
			"        {\r",
			"\r",
			"            CheckCredential();\r",
			"        }\r",
			"        else\r",
			"        {\r",
			"            Response.Redirect(HostPath + clsConst.SessionExpired);\r",
			"            Response.End();\r",
			"        }\r",
			"\r",
			"        Page.Title = \"$2\";\r",
			"        LoadDefault();\r",
			"    }\r",
			"}"
		],
		"description": "Initialize Web Form"
	},
	"ASP Post Request": {
		"prefix": "httpPost",
		"body": [
			"[HttpPost()]\r",
			"[Route(\"${1:funcName}\")]\r",
			"public HttpResponseMessage $1([FromBody] JToken postData)\r",
			"{\r",
			"    string Result = \"\";\r",
			"    string ResponseCode = clsConst.const_ResponseCode_SystemError;\r",
			"    JObject jobj = new JObject();\r",
			"    try\r",
			"    {\r",
			"        string Messaging = postData.ToString();\r",
			"\r",
			"        // Log FileName\r",
			"        clsLogger.InfoLog(\"$1\");\r",
			"        clsLogger.InfoLog(Messaging);\r",
			"\r",
			"        if (ApplicationVerification(Messaging))\r",
			"        {\r",
			"            // Parameters\r",
			"            JObject paramObj = clsFuncs.GenJObj(Messaging);\r",
			"\r",
			"            int UserId = clsCommon.ToInt(clsFuncs.GetJsonNode(paramObj, \"UserId\"));\r",
			"            $2\r",
			"\r",
			"            bool flag = false;\r",
			"\r",
			"            // Condition\r",
			"            flag = (\r",
			"                UserId > 0$3\r",
			"            );\r",
			"\r",
			"            if (flag)\r",
			"            {\r",
			"                $4\r",
			"                ResponseCode = clsConst.const_ResponseCode_Successful;\r",
			"            }\r",
			"            else\r",
			"            {\r",
			"                ResponseCode = clsConst.const_Response_Code_API_MissingInformation;\r",
			"            }\r",
			"        }\r",
			"    }\r",
			"    catch (Exception ex)\r",
			"    {\r",
			"        clsLogger.ErrorLog(fstrPageName + \"$1\", ex);\r",
			"    }\r",
			"\r",
			"    jobj[clsConst.const_Key_Field_ResponseCode] = ResponseCode;\r",
			"    Result = clsFuncs.SerializeJObj(jobj);\r",
			"    return ReturnResult(Result);\r",
			"}"
		],
		"description": "Post Request V2"
	},
	"Debug ASPX Function": {
		"prefix": "debug",
		"body": [
			"string script = \"<script>alert(\\\"This is From Theme Controller!\\\")</script>\";\r",
			"Response.Write(script);"
		],
		"description": "Debug ASPX Function"
	},
	"Return Jobject": {
		"prefix": ["jobject", "DataTable", "dt"],
		"body": [
			"DataTable dt = ${function};\r",
			"\r",
			"if (clsFuncs.DataTableIsNotNothing(dt))\r",
			"{\r",
			"    string res = clsFuncs.SerializeDt(dt);\r",
			"    JArray arr = JArray.Parse(res);\r",
			"    jobj[\"Data\"] = arr[0];\r",
			"}"
		],
		"description": "description for Return Jobject"
	},
	"Return JArray": {
		"prefix": ["jarray", "DataTable", "dt"],
		"body": [
			"DataTable dt = ${function};\r",
			"\r",
			"if (clsFuncs.DataTableIsNotNothing(dt))\r",
			"{\r",
			"    string res = clsFuncs.SerializeDt(dt);\r",
			"    JArray arr = JArray.Parse(res);\r",
			"    jobj[\"Data\"] = arr;\r",
			"}"
		],
		"description": "description for Return JArray"
	},
	"Parser Functions": {
		"prefix": "parser",
		"body": "clsCommon.$function($TM_SELECTED_TEXT)",
		"description": "description for Parser Functions"
	},
	"Try-Catch Functions": {
		"prefix": ["try", "catch", "try-catch"],
		"body": [
			"try {",
			"    $TM_SELECTED_TEXT",
			"} catch (Exception ex2) {",
			"    throw ex2;",
			"}"
		],
		"description": "description for Parser Functions"
	},
	"DevExpress Excel": {
		"prefix": ["excel", "devExpress"],
		"body": [
			"protected void cmdExportExcel_Click(object sender, EventArgs e)\r",
			"        {\r",
			"            grdExport.WriteXlsxToResponse(\"Token Listing-\" + DateTime.Now.ToString(\"yyyy-MM-dd\"));\r",
			"        }"
		],
		"description": "description for DevExpress Excel"
	},
	"DevExpress Partial": {
		"prefix": ["partial", "tbl", "devExpress"],
		"body": [
			"protected void grdDetails_DataSelect(object sender, EventArgs e)\r",
			"        {\r",
			"            var data = (sender as ASPxGridView).GetMasterRowKeyValue();\r",
			"            Session[\"Token\"] = data;\r",
			"        }"
		],
		"description": "description for DevExpress Partial"
	}
}