{
	"React Fetch API": {
		"prefix": "fetch",
		"body": [
			"const fetchData = async () => {",
			"\tconst url = \"$1\";",
			"\t",
			"\t// Static Data",
			"\tlet obj = Utility.requestObj({$4});",
			"\t",
			"\tconst resp = await fetch(url, {",
			"\t\tmethod: \"POST\",",
			"\t\theaders: {",
			"\t\t\t\"Content-Type\": \"application/json\",",
			"\t\t},",
			"\t\tbody: JSON.stringify(obj),",
			"\t});",
			"\t",
			"\tconst data = await resp.json();",
			"\t",
			"\tif (data[\"ResponseCode\"] === \"00\") {",
			"\t\tconst {$5} = data;",
			"\t}",
			"\telse {",
			"\t\tconsole.log(`$2 - $3 - Request - ${JSON.stringify(obj)}`);",
			"\t\tconsole.log(`$2 - $3 - Response - ${JSON.stringify(data)}`);",
			"\t}",
			"};",
			"",
			"fetchData().catch((err) => {",
			"\tconsole.log(`Error: ${err}`);",
			"});"
		],
		"description": "React Fetch"
	},
	"React Action": {
		"prefix": "action",
		"body": [
			"const onChange$1 = ($2) => {",
			"\treturn {",
			"\t\ttype: \"$3\",",
			"\t\t$2: $2,",
			"\t}",
			"};"
		],
		"description": "React Action"
	},
	"React Selector": {
		"prefix": "select",
		"body": [
			"const $1Select = (state) => state.$1;"
		],
		"description": "React Selector"
	},
	"React Action Reducer": {
		"prefix": "reducer",
		"body": [
			"case \"SET_$2\":",
			"\treturn {",
			"\t\t...state,",
			"\t\t$1: action.$1,",
			"\t};"
		],
		"description": "React Action Reducer"
	},
	"React UseState": {
		"prefix": "useState",
		"body": [
			"const [$1, $3set$1] = useState($2);"
		],
		"description": "React UseState"
	},
	"ess": {
		"prefix": "Express Simple Server",
		"body": [
			"const express = require('express');",
			"const path = require('path');",
			"const cors = require('cors');",
			"",
			"const cookieParser = require('cookie-parser');",
			"const expressLayouts = require('express-ejs-layouts');",
			"",
			"const createError = require('http-errors');",
			"const { info, error } = require(\"./utility\");",
			"",
			"require('dotenv').config();",
			"",
			"// Create New App",
			"const app = express();",
			"",
			"app.use(cors());",
			"app.use(cookieParser());",
			"",
			"// Form Submission, Used to Handle json Data",
			"app.use(express.json({ limit: '50mb' }));",
			"app.use(express.urlencoded({ extended: false, limit: '50mb' }));",
			"",
			"app.use(express.static(path.join(__dirname, 'public')));",
			"",
			"// Express Js Layouts",
			"app.use(expressLayouts)",
			"app.set('view engine', 'ejs');",
			"app.set('views', path.join(__dirname, 'views'));",
			"",
			"// Custom Router MiddleWare",
			"let router = require('./router/route');",
			"app.use('/', router);",
			"",
			"// catch 04 and forward to error handler",
			"app.use(function (req, res, next) {",
			"\tnext(createError(404));",
			"});",
			"",
			"// error handler",
			"app.use(function (err, req, res, next) {",
			"\t// set locals, only providing error in development",
			"\terror.error(err);",
			"",
			"\t// render the error page",
			"\tres.status(err.status || 500);",
			"\tres.render('error', {",
			"\t\tmessage: err.message,",
			"\t\terror: err",
			"\t});",
			"});",
			"",
			"const PORT = process.env.PORT || 5000;",
			"",
			"app.listen(PORT, _ => {",
			"\tconsole.log(`Server Listening on PORT ${PORT}`);",
			"});"
		],
		"description": "Express Simple Server"
	},
	"Simple Router": {
		"prefix": "router",
		"body": [
			"const express = require('express');",
			"const router = express.Router();",
			"const path = require('path');",
			"",
			"// Controller",
			"const { ${1:(controller_name)}Controller } = require(\"./../controller\");",
			"",
			"router.get(\"/Get${1:(controller_name)}Data\", ${1:(controller_name)}Controller.GetData);",
			"router.post(\"/Post${1:(controller_name)}Data\", ${1:(controller_name)}Controller.PostData);",
			"",
			"module.exports = router;"
		],
		"description": "Express Router Sample"
	},
	"Express Get Function": {
		"prefix": "get",
		"body": [
			"async function ${function_name}(req, res) {",
			"\tlet responseCode = \"99\";",
			"\tlet data = {};",
			"",
			"\tinfo.info(req.query);",
			"\ttry {",
			"\t\tdata[\"Gay\"] = \"Hello World\";",
			"\t\tresponseCode = \"00\";",
			"\t} catch(err) {",
			"\t\terror.error(err);",
			"\t}",
			"",
			"\tdata[\"ResponseCode\"] = responseCode;",
			"\treturn res.status(200).json(data);",
			"}"
		],
		"description": "Express Get Function"
	},
	"Express Post Function": {
		"prefix": "post",
		"body": [
			"async function ${function_name}(req, res) {",
			"\tlet responseCode = \"99\";",
			"\tlet data = {};",
			"",
			"\tinfo.info(req.body);",
			"\ttry {",
			"\t\tconst { Input } = req.body;",
			"\t\tdata[\"Input\"] = Input;",
			"\t\tresponseCode = \"00\";",
			"\t} catch (err) {",
			"\t\terror.error(err);",
			"\t}",
			"",
			"\tdata[\"ResponseCode\"] = responseCode;",
			"\treturn res.status(200).json(data);",
			"}"
		],
		"description": "Express Post Function"
	},
	"Multer": {
		"prefix": "multer",
		"body": [
			"const ${1:engine_name}StorageEngine = multer.diskStorage({",
			"\t// Set File Save Location Path",
			"\tdestination: (req, file, cb) => {",
			"\t\tcb(null, '${2:directory_name}');",
			"\t},",
			"",
			"\t// Set name of File",
			"\tfilename: (req, file, cb) => {",
			"\t\tcb(null, file.originalname);",
			"\t}",
			"});"
		],
		"description": "Create Simple Multer"
	},
	"Multer Wrapper": {
		"prefix": "multer_wrapper",
		"body": [
			"const multerWrapper = require(\"./../middleware/multer-mw\");",
			"const uploadVideo = multer({ storage: multerWrapper.videoFileStorageEngine });"
		],
		"description": "Multer Wrapper"
	},
	"Download File": {
		"prefix": "download",
		"body": [
			"async function downloadFile(req, res) {",
			"\tlet fileName = `${req.query.name}.mp4`;",
			"",
			"\tlet filePath = path.join(__dirname, \"..\", `/videos/${fileName}`);",
			"\tres.download(filePath);",
			"}"
		],
		"description": "Download File"
	},
	"Stream Audio File": {
		"prefix": "stream_audio",
		"body": [
			"async function streamAudio(req, res) {",
			"\tlet filename = `${req.query.name}.mp3`;",
			"",
			"\tconst file_path = path.join(__dirname, \"..\", `/music-files/${filename}`);",
			"\tconst stat = fs.statSync(file_path);",
			"",
			"\tres.writeHead(206, {",
			"\t\t'Content-Length': stat.size,",
			"\t\t'Accept-Ranges': 'bytes',",
			"\t\t'Content-Type': 'audio/mpeg'",
			"\t});",
			"",
			"\tlet rStream = fs.createReadStream(file_path);",
			"",
			"\trStream.pipe(res, err => {",
			"\t\tif (err) console.log(err);",
			"\t});",
			"}"
		],
		"description": "Stream Audio File"
	},
	"Stream Video": {
		"prefix": "stream_video",
		"body": [
			"async function streamVideo(req, res) {",
			"\tlet fileName = `${req.query.name}.mp4`;",
			"",
			"\tlet filePath = path.join(__dirname, \"..\", `/videos/${fileName}`);",
			"",
			"\tconst stat = fs.statSync(filePath);",
			"",
			"\tres.writeHead(206, {",
			"\t\t'Content-Length': stat.size,",
			"\t\t'Accept-Ranges': 'bytes',",
			"\t\t'Content-Type': 'video/mp4'",
			"\t});",
			"",
			"\tlet rStream = fs.createReadStream(filePath);",
			"",
			"\trStream.pipe(res, err => {",
			"\t\tif (err) console.log(err);",
			"\t});",
			"}"
		],
		"description": "Stream Video"
	},
	"Upload File": {
		"prefix": "upload",
		"body": [
			"async function uploadFile(req, res) {",
			"\tif (!req.file) {",
			"\t\treturn res.status(500).send(\"Error receiving audio file!\");",
			"\t}",
			"",
			"\treturn res.status(200).send(`Successfully received test!`);",
			"}"
		],
		"description": "Upload File"
	},
	"Firebase Models": {
		"prefix": "init_model",
		"body": [
			"const { getData, addData, updateData, deleteData } = require(\"./../firebase-wrapper\");",
			"",
			"const { info, error } = require(\"./../../utility\");",
			"",
			"const tblName = \"${tblName}\";",
			"",
			"async function SelectAll${tblName}() {",
			"\tlet responseCode = \"99\";",
			"\tlet data = {}",
			"",
			"\ttry {",
			"\t\tlet res = await getData(tblName);",
			"\t\tdata[\"Data\"] = res;",
			"",
			"\t\tresponseCode = \"00\";",
			"\t} catch (err) {",
			"\t\terror.error(err);",
			"\t}",
			"",
			"\tdata[\"ResponseCode\"] = responseCode;",
			"\tdata[\"Method\"] = \"SelectAll${tblName}\";",
			"\treturn data;",
			"}",
			"",
			"async function Insert${tblName}(obj) {",
			"\tlet responseCode = \"99\";",
			"\tlet data = {}",
			"",
			"\ttry {",
			"\t\tawait addData(`${tblName}`, obj);",
			"\t\tresponseCode = \"00\";",
			"\t} catch (err) {",
			"\t\terror.error(err);",
			"\t}",
			"",
			"\tdata[\"ResponseCode\"] = responseCode;",
			"\tdata[\"Method\"] = \"Insert${tblName}\";",
			"\treturn data;",
			"}",
			"",
			"async function Update${tblName}(obj) {",
			"\tlet responseCode = \"99\";",
			"\tlet data = {}",
			"",
			"\ttry {",
			"\t\tawait updateData(`${tblName}/${Id}`, obj);",
			"\t\tresponseCode = \"00\";",
			"\t} catch (err) {",
			"\t\terror.error(err);",
			"\t}",
			"",
			"\tdata[\"ResponseCode\"] = responseCode;",
			"\tdata[\"Method\"] = \"Update${tblName}\";",
			"\treturn data;",
			"}",
			"",
			"async function Delete${tblName}(id) {",
			"\tlet responseCode = \"99\";",
			"\tlet data = {}",
			"",
			"\ttry {",
			"\t\tawait deleteData(`${tblName}/${id}`);",
			"\t\tresponseCode = \"00\";",
			"\t} catch (err) {",
			"\t\terror.error(err);",
			"\t}",
			"",
			"\tdata[\"ResponseCode\"] = responseCode;",
			"\tdata[\"Method\"] = \"Delete${tblName}\";",
			"\treturn data;",
			"}",
			"",
			"module.exports = {",
			"\tSelectAll${tblName},",
			"\tInsert${tblName},",
			"\tUpdate${tblName},",
			"\tDelete${tblName},",
			"}"
		],
		"description": "Firebase Models"
	},
	"Express-Firebase MVC Controller": {
		"prefix": "init_mvc_controller",
		"body": [
			"const { info, error } = require(\"./../../utility\");",
			"",
			"const { ${tblName}Model } = require(\"./../../models\");",
			"",
			"async function SelectAll${tblName}(req, res) {",
			"\tlet responseCode = \"99\";",
			"\tlet data = {};",
			"",
			"\tinfo.info(req.query);",
			"\ttry {",
			"\t\tlet resp = await ${tblName}Model.SelectAll${tblName}();",
			"",
			"\t\tresponseCode = resp[\"ResponseCode\"];",
			"\t\tdata[\"Data\"] = Object.values(resp[\"Data\"]);",
			"\t} catch(err) {",
			"\t\terror.error(err);",
			"\t}",
			"",
			"\tdata[\"ResponseCode\"] = responseCode;",
			"\treturn res.status(200).json(data);",
			"}",
			"",
			"async function Insert${tblName}(req, res) {",
			"\tlet responseCode = \"99\";",
			"\tlet data = {};",
			"",
			"\tinfo.info(req.body);",
			"\ttry {",
			"\t\tconst { ${tblName}name, password } = req.body;",
			"",
			"\t\tlet obj = {",
			"\t\t\t${tblName}name: ${tblName}name,",
			"\t\t\tpassword: securityHelper.hashPassword(password),",
			"\t\t\temail_address: \"\",",
			"\t\t}",
			"",
			"\t\tlet resp = await ${tblName}Model.Insert${tblName}(obj);",
			"\t\tresponseCode = resp[\"ResponseCode\"];",
			"\t} catch (err) {",
			"\t\terror.error(err);",
			"\t}",
			"",
			"\tdata[\"ResponseCode\"] = responseCode;",
			"\treturn res.status(200).json(data);",
			"}",
			"",
			"async function Update${tblName}(req, res) {",
			"\tlet responseCode = \"99\";",
			"\tlet data = {};",
			"",
			"\tinfo.info(req.body);",
			"\ttry {",
			"\t\tconst { ${tblName}name, password } = req.body;",
			"",
			"\t\tlet obj = {",
			"\t\t\t${tblName}name: ${tblName}name,",
			"\t\t\tpassword: securityHelper.hashPassword(password),",
			"\t\t\temail_address: \"\",",
			"\t\t}",
			"",
			"\t\tlet resp = await ${tblName}Model.Update${tblName}(obj);",
			"\t\tresponseCode = resp[\"ResponseCode\"];",
			"\t} catch (err) {",
			"\t\terror.error(err);",
			"\t}",
			"",
			"\tdata[\"ResponseCode\"] = responseCode;",
			"\treturn res.status(200).json(data);",
			"}",
			"",
			"async function Delete${tblName}(req, res) {",
			"\tlet responseCode = \"99\";",
			"\tlet data = {};",
			"",
			"\tinfo.info(req.body);",
			"\ttry {",
			"\t\tconst { Id } = req.body;",
			"",
			"\t\tlet resp = await ${tblName}Model.Delete${tblName}(Id);",
			"\t\tresponseCode = resp[\"ResponseCode\"];",
			"\t} catch (err) {",
			"\t\terror.error(err);",
			"\t}",
			"",
			"\tdata[\"ResponseCode\"] = responseCode;",
			"\treturn res.status(200).json(data);",
			"}",
			"",
			"module.exports = {",
			"\tSelectAll${tblName},",
			"\tInsert${tblName},",
			"\tUpdate${tblName},",
			"\tDelete${tblName}",
			"}"
		],
		"description": "Express-Firebase MVC Controller"
	},
	"Router routes": {
		"prefix": "route_gen",
		"body": [
			"router.post(\"/${tblName}/SelectAll${tblName}\", ${tblName}Controller.SelectAll${tblName});",
			"router.post(\"/${tblName}/Insert${tblName}\", ${tblName}Controller.Insert${tblName});",
			"router.post(\"/${tblName}/Update${tblName}\", ${tblName}Controller.Update${tblName});",
			"router.post(\"/${tblName}/Delete${tblName}\", ${tblName}Controller.Delete${tblName});"
		],
		"description": "Router Routes"
	},
	"Encode File to Base64": {
		"prefix": "encode64",
		"body": [
			"function encode_base64(in_path) {",
			"\tlet res = \"\";",
			"\tres = fs.readFileSync(in_path);",
			"\tres = new Buffer(res, 'base64');",
			"\treturn res;",
			"}"
		],
		"description": "Encode File to Base64"
	},
	"Decode Base64 To File": {
		"prefix": "decode64",
		"body": [
			"function decode_base64(file_path, data) {",
			"\tlet res = -1;",
			"\t// write buffer to file",
			"\ttry {",
			"\t\tfs.writeFileSync(file_path, data, { encoding: 'base64' });",
			"\t\tres = 1;",
			"\t} catch (err) {",
			"\t\tconsole.error(err);",
			"\t}",
			"\treturn res;",
			"}"
		],
		"description": "Decode Base64 To File"
	},
	"Convert Multipart Form Data To Base64": {
		"prefix": "encode64",
		"body": [
			"function getBase64(file) {",
			"\tvar reader = new FileReader();",
			"\treader.readAsDataURL(file);",
			"\treader.onload = function () {",
			"\t console.log(reader.result);",
			"\t};",
			"\treader.onerror = function (error) {",
			"\t console.log('Error: ', error);",
			"\t};",
			"}"
		],
		"description": "Convert Multipart Form Data To Base64"
	},
	"Firebase Wrapper": {
		"prefix": "fbase-wrapper",
		"body": [
			"const firebase = require(\"firebase-admin\");",
			"",
			"const { privateKey } = require(\"./../certificate\");",
			"",
			"const { info, error } = require(\"./../utility\");",
			"",
			"// Initialize App",
			"const app = firebase.initializeApp({",
			"\tcredential: firebase.credential.cert(privateKey),",
			"\tdatabaseURL: \"https://fbase-adapter-19365-default-rtdb.firebaseio.com\",",
			"});",
			"",
			"const database = firebase.database(app);",
			"",
			"async function onLoad() {",
			"\tconsole.log(\"Hello from firebase-wrapper.js\");",
			"\tinfo.info(\"Hello from firebase-wrapper.js\");",
			"}",
			"",
			"// Get Data [Return List]",
			"async function getData(name) {",
			"\tlet ref = database.ref().child(name);",
			"",
			"\tlet res = await ref.once(\"value\");",
			"\tres = res.val();",
			"",
			"\treturn res;",
			"}",
			"",
			"// Update Data [List]",
			"async function updateData(name, obj) {",
			"\tlet ref = database.ref().child(name);",
			"",
			"\tawait ref.set(obj);",
			"}",
			"",
			"async function addData(name, obj) {",
			"\tlet ref = database.ref().child(name).push();",
			"",
			"\tconst { key } = ref;",
			"",
			"\tobj = {",
			"\t\t...obj,",
			"\t\tId: key",
			"\t}",
			"",
			"\tawait ref.set(obj);",
			"}",
			"",
			"async function deleteData(name) {",
			"\tlet ref = database.ref().child(name);",
			"",
			"\tawait ref.remove();",
			"}",
			"",
			"module.exports = {",
			"\tonLoad,",
			"\tgetData,",
			"\taddData,",
			"\tupdateData,",
			"\tdeleteData,",
			"}"
		],
		"description": "Firebase Wrapper"
	},
	"React Empty Modal": {
		"prefix": "init_modal",
		"body": [
			"import React, { useState, useEffect } from \"react\";",
			"import { Text, TouchableOpacity, Image, TextInput, Dimensions } from \"react-native\";",
			"import { View, VStack, HStack, useToast } from \"native-base\";",
			"import FontAwesome5 from \"react-native-vector-icons/FontAwesome5\";",
			"import { useNavigation, useIsFocused } from \"@react-navigation/native\";",
			"",
			"const screen = Dimensions.get(\"screen\");",
			"const { width, height } = screen;",
			"",
			"import { Logger, Utility } from \"@utility\";",
			"",
			"import { Images, GlobalStyles, GlobalColors } from \"@config\";",
			"",
			"import { BaseModal } from \"@components\";",
			"",
			"function Index(props) {",
			"\treturn (",
			"\t\t<BaseModal {...props} >",
			"\t\t\t{/* Content */}",
			"",
			"\t\t</BaseModal>",
			"\t);",
			"}",
			"",
			"export default Index;"
		],
		"description": "React Empty Modal"
	},
	"React Init": {
		"prefix": "react",
		"body": [
			"import React, { useState, useEffect } from \"react\";",
			"",
			"import { Logger, Utility } from \"@utility\";",
			"",
			"import { Link } from \"react-router-dom\";",
			"",
			"function Index(props) {",
			"\treturn (",
			"\t\t${1:<>Enter Your React Component</>}",
			"\t);",
			"}",
			"",
			"export default Index;"
		],
		"description": "React Init"
	},
	"React Screens": {
		"prefix": "screen",
		"body": [
			"\"${1:screen}\": {",
			"\tpath: \"/${1:screen}\",",
			"\telement: <${1:screen} />,",
			"\ttitle: \"${1:screen}\"",
			"},"
		],
		"description": "React Screens"
	},
	"React Empty Page": {
		"prefix": "init_empty",
		"body": [
			"<MPSGLayout>",
			"\t<div className={\"h2\"}>This is ${name} Page</div>",
			"</MPSGLayout>"
		],
		"description": "React Empty Page"
	},
	"React Redux": {
		"prefix": "redux",
		"body": [
			"import { useDispatch, useSelector } from 'react-redux';\r",
			"import { Actions, Selectors } from '@redux';"
		],
		"description": "React Redux"
	},
	"LeetCode": {
		"prefix": "leetcode",
		"body": [
			"let $2 = null;\r",
			"$3\r",
			"\r",
			"const res = $1($2$4);\r",
			"console.log(res);"
		],
		"description": "LeetCode"
	},
	"Fetch V2": {
		"prefix": "fetch",
		"body": [
			"import { Utility } from \"@utility\";\r",
			"\r",
			"const Index = async (props) => {\r",
			"\r",
			"    const { param } = props;\r",
			"    const { onSetLoading } = props;\r",
			"\r",
			"    const action = \"$1\";\r",
			"    const url = Utility.genServerUrl(action);\r",
			"\r",
			"    // Static Data\r",
			"    let obj = Utility.requestObj(param);\r",
			"\r",
			"    const resp = await fetch(url, {\r",
			"        method: \"POST\",\r",
			"        headers: {\r",
			"            \"Content-Type\": \"application/json\",\r",
			"        },\r",
			"        body: JSON.stringify(obj),\r",
			"    });\r",
			"\r",
			"    const data = await resp.json();\r",
			"    onSetLoading(false);\r",
			"\r",
			"    if (data[\"ResponseCode\"] === \"00\") {\r",
			"        // return data;\r",
			"    }\r",
			"    else {\r",
			"        console.log(`$2 - $3 - Request - ${JSON.stringify(obj)}`);\r",
			"        console.log(`$2 - $3 - Response - ${JSON.stringify(data)}`);\r",
			"    }\r",
			"\r",
			"    return data;\r",
			"};\r",
			"\r",
			"export default Index;"
		],
		"description": "New Fetch API Using API Folder"
	},
	"Create React Native Modal": {
		"prefix": "init",
		"body": [
			"import React, { useState, useEffect } from \"react\";",
			"import { Text, TouchableOpacity, Image, TextInput } from \"react-native\";",
			"import { View, VStack, HStack } from \"native-base\";",
			"",
			"import { Logger, Utility } from \"@utility\";",
			"",
			"import { BaseModal } from \"@components\";",
			"",
			"import { useModalToast } from \"@hooks\";",
			"",
			"function Index(props) {",
			"",
			"    const [cusToast, showMsg] = useModalToast();",
			"",
			"    return (",
			"        <BaseModal cusToast={cusToast} {...props}>",
			"            <VStack py={5} space={5} ",
			"                alignItems={\"center\"}>",
			"                <View alignItems={\"center\"}>",
			"                    <Text style={{",
			"                        fontFamily: \"Roboto-Bold\",",
			"                        fontSize: 18,",
			"                        color: \"#000\"",
			"                    }}>$1</Text>",
			"                </View>",
			"            </VStack>",
			"        </BaseModal>",
			"    )",
			"}",
			"",
			"export default Index;"
		],
		"description": "Create React Native Modal"
	},
	"React Init II": {
		"prefix": [
			"init",
			"react"
		],
		"body": [
			"import React, { useState, useEffect } from \"react\";",
			"import { Text, TouchableOpacity, Image, TextInput, SafeAreaView, ImageBackground, ScrollView } from \"react-native\";",
			"import { View, VStack, HStack, useToast } from \"native-base\";",
			"",
			"import { useNavigation, useIsFocused } from \"@react-navigation/native\";",
			"",
			"import FontAwesome5 from \"react-native-vector-icons/FontAwesome5\";",
			"",
			"import { Logger, Utility } from \"@utility\";",
			"import { Images, Svg } from \"@config\";",
			"",
			"function Index(props) {",
			"    const toast = useToast();",
			"    const navigation = useNavigation();",
			"    const isFocused = useIsFocused();",
			"",
			"    return (",
			"        <>Enter Your React Component</>",
			"    );",
			"}",
			"",
			"export default Index;"
		],
		"description": "description for React Init II"
	},
	"React Native Screens": {
		"prefix": "screens",
		"body": [
			"${screen}: {",
			"    component: ${screen},",
			"    title: \"${screen}\",",
			"    option: {",
			"        orientation: \"portrait\"",
			"    }",
			"}"
		],
		"description": "description for React Native Screens"
	},
	"Init Empty Page": {
		"prefix": "init",
		"body": [
			"<SafeAreaView style={{ flex: 1 }}>",
			"    <View style={{ flex: 1 }}>",
			"",
			"        {/* Header */}",
			"        <View style={{ height: 80 }} />",
			"",
			"        <View style={{ height: 10 }} />",
			"",
			"        {/* Body */}",
			"        <ScrollView showsVerticalScrollIndicator={false} ",
			"            keyboardShouldPersistTaps={\"handled\"}",
			"            contentContainerStyle={{ flexGrow: 1 }}>",
			"            <View flexGrow={1} justifyContent={\"center\"}>",
			"            </View>",
			"        </ScrollView>",
			"",
			"        {/* Footer */}",
			"        <View style={{ height: 60 }} />",
			"    </View>",
			"</SafeAreaView>"
		],
		"description": "description for Init Empty Page"
	},
	"main": {
		"prefix": "main",
		"body": [
			"function main() {",
			"",
			"}",
			"",
			"main();"
		],
		"description": "description for main"
	},
	"Basic File IO": {
		"prefix": [
			"readFile",
			"json",
			"writeFile",
			"output",
			"file"
		],
		"body": [
			"// #region File IO",
			"const fs = require('fs');",
			"",
			"function readJson(filePath) {",
			"    try {",
			"        const data = fs.readFileSync(filePath, 'utf-8');",
			"        const res = JSON.parse(data);",
			"",
			"        console.log(`Successfully read Data from \\${filePath}!`);",
			"",
			"        return res;",
			"    } catch (err) {",
			"        console.error(`Error! Unable to write Data to \\${filePath}! Exception: \\${err}`);",
			"        return null;",
			"    }",
			"}",
			"",
			"function writeJson(data, filePath) {",
			"    try {",
			"        const res = JSON.stringify(data)",
			"        fs.writeFileSync(filePath, res, 'utf-8');",
			"",
			"        console.log(`Successfully write Data to \\${filePath}!`);",
			"    } catch (err) {",
			"        console.error(`Error! Unable to write Data to \\${filePath}! Exception: \\${err}`);",
			"    }",
			"}",
			"// #endregion"
		],
		"description": "description for readFile"
	},
	"React Class Components": {
		"prefix": "init",
		"body": [
			"// Counter App",
			"class App extends React.Component {",
			"",
			"    // Use State",
			"    constructor() {",
			"        super();",
			"        this.state = {",
			"            count: 0,",
			"            flag: false,",
			"            bgColor: \"#F00\"",
			"        }",
			"    }",
			"",
			"    // On Load",
			"    componentDidMount() {",
			"        // Set State",
			"        this.setState({",
			"            ...this.state,",
			"            flag: true,",
			"            bgColor: \"#FFF\"",
			"        })",
			"    }",
			"",
			"    // UseEffect",
			"    componentDidUpdate(prevProps, prevState) {",
			"        const { count: prevCount = 0 } = prevState;",
			"        const { count = 0 } = this.state;",
			"",
			"        if (count != prevCount) {",
			"            const bgColor = (prevCount % 2 == 0) ? \"#F00\" : \"#FFF\";",
			"",
			"            const nextState = {",
			"                ...this.state, bgColor",
			"            };",
			"",
			"            this.setState(nextState);",
			"        }",
			"    }",
			"",
			"    render() {",
			"        const { children = null } = this.props;",
			"        const { flag = false, count = 0, bgColor } = this.state;",
			"",
			"        const addCount = () => {",
			"            const nextState = {",
			"                ...this.state,",
			"                count: count + 1",
			"            };",
			"            this.setState(nextState);",
			"        }",
			"",
			"        if (!flag) {",
			"            return (",
			"                <div className=\"h2\">App has not Loaded</div>",
			"            )",
			"        }",
			"",
			"        return (",
			"            <div className={\"p-3\"}>",
			"                <div className={\"border border-dark p-3\"}",
			"                    style={{ width: \"40%\", backgroundColor: bgColor }}>",
			"                    <div style={{",
			"                        display: \"flex\",",
			"                        flexDirection: \"column\",",
			"                        rowGap: 10",
			"                    }}>",
			"                        <div className={\"h2\"}>Count: {count}</div>",
			"                        <div className={\"btn btn-primary\"} onClick={addCount}>Click Me!</div>",
			"                    </div>",
			"                </div>",
			"            </div>",
			"        )",
			"",
			"    }",
			"}"
		],
		"description": "description for React Class Components"
	},
	"React Functional Component": {
		"prefix": "init",
		"body": [
			"const useState = React.useState;",
			"const useEffect = React.useEffect;",
			"",
			"function useCount() {",
			"    const [count, setCount] = useState(0);",
			"",
			"    const addCount = () => {",
			"        setCount(val => val + 1);",
			"    }",
			"",
			"    return [count, addCount];",
			"}",
			"",
			"function App() {",
			"",
			"    const [flag, setFlag] = useState(false);",
			"    const [count, addCount] = useCount();",
			"    const [bgColor, setBgColor] = useState(\"#F00\")",
			"",
			"    useEffect(() => {",
			"        setFlag(true);",
			"    }, []);",
			"",
			"    useEffect(() => {",
			"        const tBgColor = (count % 2 == 0) ? \"#F00\" : \"#FFF\";",
			"        setBgColor(_ => tBgColor);",
			"    }, [count]);",
			"",
			"    if (!flag) {",
			"        return (",
			"            <div className=\"h2\">App has not Loaded</div>",
			"        )",
			"    }",
			"",
			"    return (",
			"        <div className={\"p-3\"}>",
			"            <div className={\"border border-dark p-3\"}",
			"                style={{ width: \"40%\", backgroundColor: bgColor }}>",
			"                <div style={{",
			"                    display: \"flex\",",
			"                    flexDirection: \"column\",",
			"                    rowGap: 10",
			"                }}>",
			"                    <div className={\"h2\"}>Count: {count}</div>",
			"                    <div className={\"btn btn-primary\"} onClick={addCount}>Click Me!</div>",
			"                </div>",
			"            </div>",
			"        </div>",
			"    )",
			"}"
		],
		"description": "React Functional Component => Simple Counter Program"
	},
	"Macro Init": {
		"prefix": "macro",
		"body": [
			"function ${1:MacroName}() {",
			"",
			"    const editor = vscode.window.activeTextEditor;",
			"",
			"    if (!editor) {",
			"        // Return an error message if necessary.",
			"        return \" Editor is not opening.\";",
			"    }",
			"",
			"    const selection = editor.selection;",
			"    const text = editor.document.getText(selection);",
			"",
			"    if (text.length > 0) {",
			"        ${2:MacroFunction}",
			"    } else {",
			"        return \" Selection Cannot be Empty!\"",
			"    }",
			"}"
		],
		"description": "description for Macro Init"
	},
	"Macro Json": {
		"prefix": "macro",
		"body": [
			"\"${1:funcName}\": {",
			"    no: 1,",
			"    func: ${1:funcName}",
			"}"
		],
		"description": "description for Macro Json"
	},
	"Region Comments": {
		"prefix": "region",
		"body": [
			"// #region ${1:region_name}\r",
			"$TM_SELECTED_TEXT\r",
			"// #endregion"
		],
		"description": "description for Region Comments"
	},
	"Javascript Function": {
		"prefix": "function",
		"body": [
			"function ${1:funcName}(${2:funcParam}) {",
			"    $TM_SELECTED_TEXT",
			"}"
		],
		"description": "description for Javascript Function"
	},
	"Constants": {
		"prefix": [
			"const",
			"clsConst"
		],
		"body": [
			"const path = require(\"path\");\r",
			"\r",
			"const LOG_DIR = path.join(__dirname, \"../logs\");\r",
			"\r",
			"const NORMAL_LOG = path.join(__dirname, \"../logs\", \"info.log\");\r",
			"const ERROR_LOG = path.join(__dirname, \"../logs\", \"error.log\");\r",
			"\r",
			"module.exports = {\r",
			"    LOG_DIR,\r",
			"    NORMAL_LOG,\r",
			"    ERROR_LOG\r",
			"}"
		],
		"description": "description for Constants"
	},
	"Writer": {
		"prefix": [
			"writer",
			"clsWriter"
		],
		"body": [
			"const fs = require(\"fs\");",
			"",
			"const clsLogger = require(\"./clsLogger\");",
			"",
			"class Writer {",
			"    read(filePath) {",
			"        try {",
			"            const data = fs.readFileSync(filePath, 'utf-8');",
			"            const res = JSON.parse(data);",
			"",
			"            clsLogger.info(res);",
			"            clsLogger.info(`Successfully read Data from \\${filePath}!`);",
			"",
			"            return res;",
			"        } catch (err) {",
			"            clsLogger.error(`Error! Unable to write Data to \\${filePath}! Exception: \\${err}`);",
			"            return null;",
			"        }",
			"    }",
			"    write(content, filePath) {",
			"        try {",
			"            const res = JSON.stringify(content, null, 4);",
			"            fs.writeFileSync(filePath, res, 'utf-8');",
			"",
			"            clsLogger.info(content);",
			"            clsLogger.info(`Successfully write Data to \\${filePath}!`);",
			"        } catch (err) {",
			"            clsLogger.error(`Error! Unable to write Data to \\${filePath}! Exception: \\${ex}`);",
			"        }",
			"    }",
			"}",
			"",
			"module.exports = new Writer();"
		],
		"description": "description for Writer"
	},
	"Utility": {
		"prefix": "utility",
		"body": [
			"const { LOG_DIR, NORMAL_LOG, ERROR_LOG } = require(\"./clsConst\");",
			"const clsLogger = require(\"./clsLogger\");",
			"",
			"function genDt() {",
			"    const dt = new Date();",
			"",
			"    const year = dt.getFullYear();",
			"    const month = String(dt.getMonth() + 1).padStart(2, '0');",
			"    const day = String(dt.getDate()).padStart(2, '0');",
			"",
			"    const t = `\\${year}\\${month}\\${day}`;",
			"",
			"    const hours = String(dt.getHours()).padStart(2, '0');",
			"    const minutes = String(dt.getMinutes()).padStart(2, '0');",
			"    const seconds = String(dt.getSeconds()).padStart(2, '0');",
			"",
			"    const t2 = `\\${hours}\\${minutes}\\${seconds}`;",
			"",
			"    return `\\${t}T\\${t2}`;",
			"}",
			"",
			"module.exports = {",
			"    genDt",
			"}"
		],
		"description": "description for Utility"
	},
	"Logger": {
		"prefix": [
			"logger",
			"clsLogger"
		],
		"body": [
			"const fs = require(\"fs\");",
			"",
			"const { LOG_DIR, NORMAL_LOG, ERROR_LOG } = require(\"./clsConst\");",
			"const { genDt } = require(\"./clsUtility\");",
			"",
			"// Check If Folder exists",
			"if (!fs.existsSync(LOG_DIR)) {",
			"    fs.mkdirSync(LOG_DIR);",
			"    console.log(`Directory \\${LOG_DIR} created!`);",
			"}",
			"",
			"class Log {",
			"    info(content) {",
			"        try {",
			"            let dt = genDt();",
			"            content = JSON.stringify(content);",
			"            content = dt + ' ' + content + '\\n';",
			"",
			"            console.log(content.slice(0, -1));",
			"            fs.writeFileSync(NORMAL_LOG, content, { flag: \"a+\" });",
			"        } catch (err) {",
			"            console.log(err);",
			"        }",
			"    }",
			"",
			"    error(content) {",
			"        try {",
			"            let dt = genDt();",
			"            content = JSON.stringify(content);",
			"            content = dt + ' ' + content + '\\n';",
			"",
			"            console.log(content.slice(0, -1));",
			"            fs.writeFileSync(ERROR_LOG, content, { flag: \"a+\" });",
			"        } catch (err) {",
			"            console.error(err);",
			"        }",
			"    }",
			"}",
			"",
			"module.exports = new Log();"
		],
		"description": "Description for Logger"
	},
	"Macro Function II": {
		"prefix": ["macro", "function"],
		"body": [
			"function ${func_name}(text = \"[]\") {",
			"    if (text.length <= 0) {",
			"        return \"\";",
			"    }",
			"",
			"    try {",
			"        ",
			"    } catch (error) {",
			"        throw error;",
			"    }",
			"}"
		],
		"description": "Description for Macro Function II"
	},
	"Jest Boilerplate": {
		"prefix": ["jest", "test"],
		"body": [
			"test(\"$1\", () => {\r",
			"    expect().toBe();\r",
			"})"
		],
		"description": "description for Jest Boilerplate"
	}
}