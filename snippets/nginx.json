{
	"Basic Configuration": {
		"prefix": "init",
		"body": [
			"user nginx;",
			"worker_processes auto;",
			"",
			"pid /var/run/nginx.pid; # Set NGINX Master Process PID",
			"error_log /var/log/nginx/error.log info; # Set NGINX Error Log",
			"",
			"# Each Worker should handle 1024 connections",
			"events {",
			"  worker_connections 1024;",
			"}",
			"",
			"http {",
			"  include /etc/nginx/mime.types;",
			"  default_type application/octet-stream;",
			"",
			"  log_format  main  '\\$remote_addr - \\$remote_user [\\$time_local] \"\\$request\" '",
			"                    '\\$status \\$body_bytes_sent \"\\$http_referer\" '",
			"                    '\"\\$http_user_agent\" \"\\$http_x_forwarded_for\"';",
			"",
			"  # Set Path, Name and Format for Access Log",
			"  access_log  /var/log/nginx/access.log main;",
			"  sendfile on;",
			"  keepalive_timeout 65;",
			"",
			"  server {",
			"    listen 80;",
			"    listen [::]:80;",
			"",
			"    server_name $domain_name;",
			"  }",
			"}"
		],
		"description": "description for Basic Configuration"
	},
	"Error Handling": {
		"prefix": "error_404",
		"body": [
			"root /var/www/domain.name/public_html;",
			"error_page 404 /not_found.html;",
			"",
			"proxy_intercept_errors on;",
			"",
			"location = /not_found.html {",
			"  internal;",
			"}"
		],
		"description": "Error 404"
	},
	"Load Balancer": {
		"prefix": "load_balancing",
		"body": [
			"http {",
			"  upstream upstream-server {",
			"    server server1:3000 weight=5;",
			"    server server2:3001 weight=4;",
			"    server server3:3002 weight=3;",
			"  }",
			"",
			"  server {",
			"    listen 8080;",
			"",
			"    location / {",
			"      proxy_pass http://upstream-server;",
			"    }",
			"  }",
			"}"
		],
		"description": "Load Balancer Configuration"
	},
	"File Compression": {
		"prefix": "file_compression",
		"body": [
			"http {",
			"  server {",
			"    gzip  on;",
			"    gzip_buffers 16 8k;",
			"    gzip_comp_level 6;",
			"    gzip_http_version 1.1;",
			"    gzip_min_length 256;",
			"    gzip_proxied any;",
			"    gzip_vary on;",
			"    gzip_types",
			"      text/xml application/xml application/atom+xml application/rss+xml application/xhtml+xml image/svg+xml",
			"      text/javascript application/javascript application/x-javascript",
			"      text/x-json application/json application/x-web-app-manifest+json",
			"      text/css text/plain text/x-component",
			"      font/opentype application/x-font-ttf application/vnd.ms-fontobject",
			"      image/x-icon;",
			"    gzip_disable  \"msie6\";",
			"  }",
			"}"
		],
		"description": "File Compression"
	},
	"CORS Handling": {
		"prefix": "cors",
		"body": [
			"server {",
			"  listen 80;",
			"  server_name your_domain.com;",
			"",
			"  location / {",
			"    # STEP1: Setup CORS Headers",
			"    add_header 'Access-Control-Allow-Origin' '*';",
			"    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';",
			"    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';",
			"",
			"    # STEP 2: Handle HTTP OPTIONS Request",
			"    # Normally CORS will send out a pre-flight requests",
			"    if (\\$request_method = 'OPTIONS') {",
			"      add_header 'Access-Control-Allow-Origin' '*';",
			"      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';",
			"      add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';",
			"",
			"      add_header 'Access-Control-Max-Age' 1728000;",
			"      add_header 'Content-Type' 'text/plain; charset=utf-8';",
			"      add_header 'Content-Length' 0;",
			"      return 204;",
			"    }",
			"  }",
			"}"
		],
		"description": "description for CORS Handling"
	},
	"Web-Socket Connection": {
		"prefix": "web_socket",
		"body": [
			"server {",
			"  listen 80;",
			"  server_name your_domain.com;",
			"",
			"  location / {",
			"    proxy_pass http://localhost:8080/;",
			"    proxy_http_version 1.1;",
			"    proxy_set_header Upgrade \\$http_upgrade;",
			"    proxy_set_header Connection 'upgrade';",
			"    proxy_set_header Host \\$host;",
			"  }",
			"}"
		],
		"description": "Web-Socket Connection"
	},
	"SSL Certificate": {
		"prefix": "ssl_certs",
		"body": [
			"user nginx;",
			"worker_processes auto;",
			"",
			"pid /var/run/nginx.pid; # Set NGINX Master Process PID",
			"error_log /var/log/nginx/error.log info; # Set NGINX Error Log",
			"",
			"# Each Worker should handle 1024 connections",
			"events {",
			"  worker_connections 1024;",
			"}",
			"",
			"http {",
			"  include /etc/nginx/mime.types;",
			"  default_type application/octet-stream;",
			"",
			"  # Set Path, Name and Format for Access Log",
			"  access_log  /var/log/nginx/access.log main;",
			"  sendfile on;",
			"  keepalive_timeout 65;",
			"",
			"  server {",
			"    listen 80;",
			"    listen [::]:80;",
			"    server_name www.neix-chs.tech;",
			"    return 302 https://\\$server_name\\$request_uri;",
			"  }",
			"",
			"  server {",
			"    listen 443 ssl;",
			"    listen [::]:443 ssl;",
			"",
			"    ssl_certificate         /etc/letsencrypt/live/www.neix-chs.tech/fullchain.pem;",
			"    ssl_certificate_key     /etc/letsencrypt/live/www.neix-chs.tech/privkey.pem;",
			"",
			"    server_name  www.neix-chs.tech;",
			"",
			"    location / {",
			"      proxy_pass http://localhost:51234;",
			"      proxy_http_version 1.1;",
			"      proxy_ssl_server_name on;",
			"    }",
			"",
			"    location /api/ {",
			"      proxy_pass http://localhost:6969/;",
			"    }",
			"  }",
			"}"
		],
		"description": "SSL Certificate"
	},
	"Normal Proxy": {
		"prefix": "proxy",
		"body": [
			"location / {",
			"  index index.html;",
			"  try_files \\$uri \\$uri/ =404;",
			"}"
		],
		"description": "Normal Proxy"
	},
	"Proxy Pass": {
		"prefix": "proxy",
		"body": [
			"location /api/ {",
			"  proxy_pass http://localhost:8080/;",
			"}"
		],
		"description": "description for Proxy Pass"
	},
	"Directory Browsing": {
		"prefix": "directory_browse",
		"body": [
			"location /browse {                   # new URL path",
			"  alias /usr/share/nginx/html;     # Browse this folder",
			"  index index.html;                # Use this file, but if it does *not* exist",
			"  autoindex on;                    # Perform directory/file browsing",
			"}"
		],
		"description": "description for Directory Browsing"
	},
	"Authentication": {
		"prefix": "auth",
		"body": [
			"server {",
			"",
			"  listen 80 default_server; # Listening on port 80 on all IP addresses on this machine",
			"",
			"  server_name www.example.com; # Set hostname to match in request",
			"",
			"  access_log /var/log/nginx/www.example.com.log main;",
			"  error_log /var/log/nginx/www.example.com_error.log info;",
			"",
			"  auth_basic \"Restricted\";",
			"  auth_basic_user_file auth.htpasswd;",
			"",
			"  location / {",
			"    root   /usr/share/nginx/html;",
			"    index  index.html index.htm;",
			"    try_files \\$uri /index.html;",
			"  }",
			"}"
		],
		"description": "description for Authentication"
	}
}