{
	// Place your snippets for sql here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"SQL Empty Table": {
		"prefix": "tbl",
		"body": [
			"CREATE TABLE [$1] (",
			");"
		],
		"description": "Create SQL Empty Table"
	},
	"SQL String": {
		"prefix": "varchar",
		"body": [
			"$1 VARCHAR($2),"
		],
		"description": "Create SQL String"
	},
	"SQL N String": {
		"prefix": "nvarchar",
		"body": [
			"$1 NVARCHAR($2),"
		],
		"description": "Create SQL String"
	},
	"SQL Decimal": {
		"prefix": "decimal",
		"body": [
			"$1 DECIMAL($2, $3),"
		],
		"description": "Create SQL Decimal"
	},
	"SQL Int": {
		"prefix": "int",
		"body": [
			"$1 INT,"
		],
		"description": "Create SQL Int"
	},
	"SQL DateTime": {
		"prefix": "datetime",
		"body": [
			"$1 DATETIME,"
		],
		"description": "Create SQL DateTime"
	},
	"SQL Insert Statement": {
		"prefix": "insertStmt",
		"body": [
			"INSERT INTO $1",
			"(",
			"$2",
			")",
			"VALUES",
			"(",
			"$3",
			");"
		],
		"description": "SQL Insert Statement"
	},
	"SQL Update Statment": {
		"prefix": "updateStmt",
		"body": [
			"UPDATE $1",
			"SET $2",
			"WHERE 1=1;"
		],
		"description": "SQL Update Statment"
	},
	"SQL Delete Statment": {
		"prefix": "deleteStmt",
		"body": [
			"DELETE $1",
			"WHERE 1=1",
			"AND $2 = $3;"
		],
		"description": "SQL Delete Statement"
	},
	"SQL Select Statment": {
		"prefix": "selectStmt",
		"body": [
			"SELECT * ",
			"FROM $1",
			"WHERE 1=1;"
		],
		"description": "SQL Select Statment"
	},
	"SQL Credentials Setup": {
		"prefix": "admin",
		"body": [
			"-- User Table",
			"DROP TABLE dbo.T${tblName}User;",
			"",
			"CREATE TABLE dbo.T${tblName}User(",
			"\tid INT IDENTITY(1, 1) NOT NULL,",
			"\tusername VARCHAR(max),",
			"\tpassword VARCHAR(max),",
			"\temail_address VARCHAR(max),",
			"\tCONSTRAINT user_id_pk PRIMARY KEY (id)",
			");",
			"",
			"-- Role Table",
			"DROP TABLE dbo.T${tblName}Role;",
			"",
			"CREATE TABLE dbo.T${tblName}Role(",
			"\tid INT IDENTITY(1, 1) NOT NULL,",
			"\tname VARCHAR(100),",
			"\tCONSTRAINT role_id_pk PRIMARY KEY (id)",
			");",
			"",
			"-- Permission Table",
			"DROP TABLE dbo.T${tblName}Permission;",
			"",
			"CREATE TABLE dbo.T${tblName}Permission(",
			"\tid INT IDENTITY(1, 1) NOT NULL,",
			"\tname VARCHAR(100),",
			"\tlink VARCHAR(100),",
			"\tCONSTRAINT permission_id_pk PRIMARY KEY (id)",
			");",
			"",
			"-- User Role Table",
			"DROP TABLE dbo.T${tblName}UserRole;",
			"",
			"CREATE TABLE dbo.T${tblName}UserRole(",
			"\tid INT IDENTITY(1, 1) NOT NULL,",
			"\tuser_id INT,",
			"\trole_id INT,",
			"\tstatus VARCHAR(100), ",
			"\tCONSTRAINT user_role_id_pk PRIMARY KEY (id)",
			");",
			"",
			"-- Role Permission Table",
			"DROP TABLE dbo.T${tblName}RolePermission;",
			"",
			"CREATE TABLE dbo.T${tblName}RolePermission(",
			"\tid INT IDENTITY(1, 1) NOT NULL,",
			"\trole_id INT,",
			"\tpermission_id INT,",
			"\tstatus VARCHAR(100), ",
			"\tCONSTRAINT role_permission_id_pk PRIMARY KEY (id)",
			");"
		],
		"description": "SQL Credentials Setup"
	},
	"Create SQL Table": {
		"prefix": "tblFull",
		"body": [
			"CREATE TABLE $1(\r",
			"    $2 INT IDENTITY(1,1) NOT NULL,\r",
			"    CONSTRAINT $1_pk PRIMARY KEY ($2)\r",
			");"
		],
		"description": "Initialize SQL Table"
	},
	"SQL Custom Attribute": {
		"prefix": "init",
		"body": [
			"Status INT,\r",
			"Remark NVARCHAR(400),\r",
			"Created_By VARCHAR(100),\r",
			"Created_Date DATETIME,\r",
			"Last_Updated_By VARCHAR(100),\r",
			"Last_Updated_Date DATETIME,"
		],
		"description": "SQL Custom Attribute"
	},
	"Deafult Values": {
		"prefix": "init",
		"body": [
			"1, '',\r",
			"@Last_Updated_By, GETDATE(),\r",
			"@Last_Updated_By, GETDATE()"
		],
		"description": "Default Values for Table"
	},
	"SQL Store Procedure": {
		"prefix": "store_procedure",
		"body": [
			"CREATE OR ALTER PROCEDURE NSP_${1:proc_name}\r",
			"(\r",
			"$2\r",
			")\r",
			"AS\r",
			"$3\r",
			"-- EXEC NSP_${1:proc_name}\r",
			"GO"
		],
		"description": "Create SQL Store Procedure"
	},
	"Stored Procedure Source": {
		"prefix": "sp_helptext",
		"body": "EXEC sp_helptext $TM_SELECTED_TEXT;",
		"description": "description for Stored Procedure Source"
	},
	"List All Store Procedure": {
		"prefix": "store_procedure",
		"body": [
			"SELECT * ",
			"FROM sys.procedures",
			"WHERE 1=1",
			"AND name LIKE 'NSP_${1:tableName}%';"
		],
		"description": "description for List All Store Procedure"
	},
	"Execute Stored Procedure": {
		"prefix": "exec",
		"body": "EXEC $TM_SELECTED_TEXT",
		"description": "description for Execute Stored Procedure"
	},
	"Show All Store Procedure": {
		"prefix": "store_procedure",
		"body": [
			"CREATE TABLE #NewList (",
			"    name VARCHAR(max),",
			"    data_type VARCHAR(max)",
			")",
			"",
			"DECLARE @ind INT = 1",
			"DECLARE @limit INT = (SELECT COUNT(*) FROM sys.procedures)",
			"DECLARE @proc VARCHAR(max) = ''",
			"",
			"WHILE (@ind <= @limit) ",
			"BEGIN",
			"    SELECT @proc = name",
			"    FROM sys.procedures",
			"    ORDER BY name",
			"    OFFSET (@ind - 1) ROWS",
			"    FETCH NEXT 1 ROWS ONLY",
			"",
			"    INSERT INTO #NewList",
			"    SELECT @proc, ''",
			"",
			"    INSERT INTO #NewList",
			"    SELECT p.name, t.name",
			"    FROM sys.parameters p",
			"    INNER JOIN sys.types t ",
			"    ON p.user_type_id = t.user_type_id",
			"    INNER JOIN sys.procedures pr ",
			"    ON p.object_id = pr.object_id",
			"    WHERE 1=1",
			"    AND pr.name = @proc",
			"",
			"    SET @ind = @ind + 1",
			"END",
			"",
			"SELECT * FROM #NewList;"
		],
		"description": "Snippet for Show All Store Procedure"
	},
	"Select Duplicate Records (Device Logs)": {
		"prefix": "duplicate",
		"body": [
			"DECLARE @startDt DATETIME = '${datetime}'",
			"DECLARE @endDt DATETIME = '${datetime}'",
			"",
			"SELECT *",
			"FROM TDeviceLogs",
			"WHERE 1=1",
			"AND Device_Log_Id IN (",
			"    SELECT MIN(Device_Log_Id)",
			"    FROM TDeviceLogs",
			"    WHERE 1=1",
			"    AND Record_Date >= @startDt",
			"    AND Record_Date <= @endDt",
			"    GROUP BY Device_Id, Record_Date, MetaData",
			"    HAVING COUNT(*) > 1",
			");"
		],
		"description": "Select Statement for Duplicate Records"
	},
	"Check Database CPU Usage": {
		"prefix": ["process", "debug", "sql"],
		"body": [
			"WITH CPU_Per_Db AS (\r",
			"    SELECT dmpa.DatabaseID,\r",
			"        DB_Name(dmpa.DatabaseID) AS [Database],\r",
			"        SUM(dmqs.total_worker_time) AS CPUTimeAsMS\r",
			"    FROM sys.dm_exec_query_stats dmqs\r",
			"        CROSS APPLY (\r",
			"            SELECT CONVERT(INT, value) AS [DatabaseID]\r",
			"            FROM sys.dm_exec_plan_attributes(dmqs.plan_handle)\r",
			"            WHERE attribute = N'dbid'\r",
			"        ) dmpa\r",
			"    GROUP BY dmpa.DatabaseID\r",
			")\r",
			"SELECT [Database],\r",
			"    [CPUTimeAsMS],\r",
			"    CAST(\r",
			"        [CPUTimeAsMS] * 1.0 / SUM([CPUTimeAsMS]) OVER() * 100.0 AS DECIMAL(5, 2)\r",
			"    ) AS [CPUTimeAs{96f5cbaad583fb885ff5d18ecce5734bf1e8596949521e20c290401929518f75}]\r",
			"FROM CPU_Per_Db\r",
			"ORDER BY [CPUTimeAsMS] DESC;"
		],
		"description": "description for Check Database CPU Usage"
	},
	"Check Query Process": {
		"prefix": ["process", "debug", "sql"],
		"body": "SELECT * FROM sys.dm_exec_sessions WHERE status = 'running';",
		"description": "description for Check Query Process"
	},
	"Case Condition": {
		"prefix": "case",
		"body": "AND CASE WHEN @$1 = -1 THEN @$1 ELSE [$1] END = @$1 ",
		"description": "description for Case Condition"
	},
	"SQL Info": {
		"prefix": "info",
		"body": [
			"SELECT *",
			"FROM information_schema.columns",
			"WHERE 1=1;"
		],
		"description": "description for SQL Info"
	},
	"Generate CSV Header": {
		"prefix": ["csv", "info"],
		"body": [
			"-- Generate Headers",
			"DECLARE @colname VARCHAR(max)",
			"DECLARE @tblname VARCHAR(max) = '${1:tbl_name}'",
			"SELECT @colname = COALESCE(@colname + ',', '') + [COLUMN_NAME]",
			"FROM information_schema.columns",
			"WHERE 1=1",
			"AND [TABLE_NAME] = @tblname",
			"SELECT @colname;"
		],
		"description": "description for SQL Headers"
	}
}