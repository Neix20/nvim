{
	"Sample With Volume": {
		"prefix": "volume",
		"body": [
			"version: '3.3'",
			"services:",
			"  nginx-oss:                  # NGINX OSS Webserver",
			"    hostname: nginx-oss",
			"    container_name: nginx-oss",
			"    build: nginx-oss          # Build new container, using /nginx-oss/Dockerfile",
			"    volumes:",
			"        - ./nginx-oss/etc/nginx/conf.d:/etc/nginx/conf.d                # Copy all files from this folder to container",
			"        - ./nginx-oss/etc/nginx/includes:/etc/nginx/includes",
			"        - ./nginx-oss/etc/nginx/nginx.conf:/etc/nginx/nginx.conf",
			"        - ./nginx-oss/usr/share/nginx/html/.:/usr/share/nginx/html/.    # Copy these files to container",
			"    ports:",
			"        - 80:80       # Open for HTTP",
			"        - 443:443     # Open for HTTPS",
			"        - 9000:9000   # Open for stub status page",
			"    restart: always "
		],
		"description": "description for Sample With Volume"
	},
	"Starter": {
		"prefix": "init",
		"body": [
			"version: '3.8'",
			"services:",
			"  ${container_name}:",
			"    image: ${image}"
		],
		"description": "Starter"
	},
	"Build From Dockerfile": {
		"prefix": "build",
		"body": [
			"build:",
			"  context: ./",
			"  dockerfile: ./Dockerfile"
		],
		"description": "description for Build From Dockerfile"
	},
	"Sample Starter Complete": {
		"prefix": "starter",
		"body": [
			"version: '3.8'",
			"services:",
			"  ${service_name}:",
			"    container_name: ${service_name}",
			"    image: ${image_name}",
			"    volumes:",
			"      # {Local_Folder}:{Docker_Folder}:{Permission}",
			"      - ./wp_data:/var/www/html",
			"      - ${local_folder}:/${docker_folder}",
			"    ports:",
			"      # {Local_Port}:{Docker_Port}",
			"      - \"8000:5000\"",
			"      - ${local_port}:${docker_port}",
			"    restart: always",
			"    # restart: unless_stopped",
			"    environment:",
			"      - WORDPRESS_DB_HOST=db",
			"      - WORDPRESS_DB_USER=wordpress",
			"      - WORDPRESS_DB_PASSWORD=wordpress",
			"      - WORDPRESS_DB_NAME=wordpress",
			"    expose:",
			"      - 3306",
			"      - 33060",
			"    networks:",
			"      - ${network_name}",
			"networks:",
			"  ${network_name}:",
			"volume:",
			"  ${local_folder}:"
		],
		"description": "Sample Starter Example that is complete with every possible use-case"
	},
	"Expose Ports": {
		"prefix": "expose",
		"body": [
			"expose:",
			"  - 3306",
			"  - 33060"
		],
		"description": "Expose Ports"
	},
	"Environmental Variables": {
		"prefix": "env",
		"body": [
			"environment:",
			"  - MYSQL_ROOT_PASSWORD: \"\\${MYSQL_ROOT_PASSWORD}\"",
			"  - MYSQL_DATABASE: \"\\${MYSQL_DATABASE}\"",
			"  - MYSQL_USER: \"\\${MYSQL_USER}\"",
			"  - MYSQL_PASSWORD: \"\\${MYSQL_PASSWORD}\""
		],
		"description": "Set Environment Variables (Referenced from .env)"
	},
	"Health Check For MySQL": {
		"prefix": "healthcheck",
		"body": [
			"healthcheck:",
			"  test: [\"CMD\", \"mysqladmin\" ,\"ping\", \"-h\", \"localhost\", \"-u$MYSQL_USER\", \"-p$MYSQL_PASSWORD\"]",
			"  timeout: 20s",
			"  retries: 10",
			"command: --innodb-buffer-pool-size=1G --innodb-log-buffer-size=128M"
		],
		"description": "Health Check"
	},
	"Depends": {
		"prefix": "depends",
		"body": [
			"depends_on:",
			"  - ${service_name}"
		],
		"description": "Depends on Other Container"
	},
	"Multiple Images & Networks": {
		"prefix": ["multi", "network"],
		"body": [
			"version: \"3\"",
			"services:",
			"  redis:",
			"    image: redis:alpine",
			"    ports:",
			"      - \"6379:6379\"",
			"    networks:",
			"      - frontend",
			"  db:",
			"    image: postgres:9.4",
			"    volumes:",
			"      - db-data:/var/lib/postgresql/data",
			"    networks:",
			"      - backend",
			"  vote:",
			"    image: dockersamples/examplevotingapp_vote:before",
			"    ports:",
			"      - 5000:80",
			"    networks:",
			"      - frontend",
			"    depends_on:",
			"      - redis",
			"  result:",
			"    image: dockersamples/examplevotingapp_result:before",
			"    ports:",
			"      - 5001:80",
			"    networks:",
			"      - backend",
			"    depends_on:",
			"      - db",
			"  worker:",
			"    image: dockersamples/examplevotingapp_worker",
			"    networks:",
			"      - frontend",
			"      - backend",
			"networks:",
			"  frontend:",
			"  backend:",
			"volumes:",
			"  db-data:"
		],
		"description": "Multiple Images and Networks"
	},
	"Docker Swarm": {
		"prefix": "swarm",
		"body": [
			"version: \"3\"",
			"services:",
			"  redis:",
			"    image: redis:alpine",
			"    ports:",
			"      - \"6379\"",
			"    networks:",
			"      - frontend",
			"    deploy:",
			"      replicas: 2",
			"      update_config:",
			"        parallelism: 2",
			"        delay: 10s",
			"      restart_policy:",
			"        condition: on-failure",
			"  db:",
			"    image: postgres:9.4",
			"    volumes:",
			"      - db-data:/var/lib/postgresql/data",
			"    networks:",
			"      - backend",
			"    deploy:",
			"      placement:",
			"        constraints: [node.role == manager]",
			"  vote:",
			"    image: dockersamples/examplevotingapp_vote:before",
			"    ports:",
			"      - 5000:80",
			"    networks:",
			"      - frontend",
			"    depends_on:",
			"      - redis",
			"    deploy:",
			"      replicas: 2",
			"      update_config:",
			"        parallelism: 2",
			"      restart_policy:",
			"        condition: on-failure",
			"  result:",
			"    image: dockersamples/examplevotingapp_result:before",
			"    ports:",
			"      - 5001:80",
			"    networks:",
			"      - backend",
			"    depends_on:",
			"      - db",
			"    deploy:",
			"      replicas: 1",
			"      update_config:",
			"        parallelism: 2",
			"        delay: 10s",
			"      restart_policy:",
			"        condition: on-failure",
			"  worker:",
			"    image: dockersamples/examplevotingapp_worker",
			"    networks:",
			"      - frontend",
			"      - backend",
			"    deploy:",
			"      mode: replicated",
			"      replicas: 1",
			"      labels: [APP=VOTING]",
			"      restart_policy:",
			"        condition: on-failure",
			"        delay: 10s",
			"        max_attempts: 3",
			"        window: 120s",
			"      placement:",
			"        constraints: [node.role == manager]",
			"  visualizer:",
			"    image: dockersamples/visualizer",
			"    ports:",
			"      - \"8080:8080\"",
			"    stop_grace_period: 1m30s",
			"    volumes:",
			"      - /var/run/docker.sock:/var/run/docker.sock",
			"    deploy:",
			"      placement:",
			"        constraints: [node.role == manager]",
			"networks:",
			"  frontend:",
			"  backend:",
			"volumes:",
			"  db-data:"
		],
		"description": "Docker Swarm"
	},
	"ports": {
		"prefix": "ports",
		"body": [
			"ports:",
			"  # {Local_Port}:{Docker_Port}",
			"  - \"8000:5000\"",
			"  - ${Local_Port}:${Docker_Port}"
		],
		"description": "description for ports"
	},
	"Nginx Example": {
		"prefix": "nginx",
		"body": [
			"version: '3.3'",
			"services:",
			"  node:",
			"    image: txe1/simple-react-app",
			"    networks:",
			"      - frontend",
			"  nginx:",
			"    restart: always",
			"    image: nginx:latest",
			"    ports:",
			"      # {Local_Port}:{Docker_Port}",
			"      - \"4000:80\"",
			"    volumes:",
			"      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf",
			"    depends_on:",
			"      - node",
			"    networks:",
			"      - frontend",
			"networks:",
			"  frontend:"
		],
		"description": "Example of Multi-Docker Container with Nginx"
	},
	"Nginx Example II": {
		"prefix": "nginx",
		"body": [
			"version: '3.3'",
			"services:",
			"  nginx:",
			"    restart: always",
			"    image: nginx:latest",
			"    ports:",
			"      # {Local_Port}:{Docker_Port}",
			"      - \"4000:80\"",
			"    volumes:",
			"      - ./dist:/usr/share/nginx/html/",
			"      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf"
		],
		"description": "Build From Nginx"
	}
}